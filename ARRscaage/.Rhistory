par(mar = c(0, 3.1, 1.1, 2.1), cex.lab = cex.lab, cex.axis = cex.axis, las = 1)
# las=1: style of axis labels, here always horizontal!
nf = layout(mat = matrix(c(1, 2), 2, 1, byrow = TRUE), height = c(3, 1))
# HB histogram
x = unlist(data$hb_commonscore[(!is.na(data$hb_commonscore)) & log_only])
tmp1 = hist(x, freq = T, main = NA, breaks = breaks(x, x0 = 0, 2), xlim = c(0, 30),
xlab = NA, ylab = NA, axes = F, col = az_green)
ax = c(0:2) * 100
axis(2, at = ax, labels = ax, cex.axis = cex.axis)
box(lwd = 1)
par(mar = c(4.1, 3.1, 0, 2.1))
boxplot(x, horizontal = TRUE, outline = TRUE, ylim = c(0, max(x)), frame = T, axes = F,
names = "HB", sub = "HB", col = az_green, width = 0.25)
ax = c(0:3) * 10
axis(1, at = ax, labels = ax, cex.axis = cex.axis)
title(xlab = "HB")
dev.off()
png(file = "ARRhismer_rp.png", width = 4, height = 4, units = "in", res = res, family = font)
par(mar = c(0, 3.1, 1.1, 2.1), cex.lab = cex.lab, cex.axis = cex.axis, las = 1)
rp_average_rank_score = as.numeric(data$rp_average_rank_score[(!is.na(data$rp_author)) &log_only])
nf = layout(mat = matrix(c(1, 2), 2, 1, byrow = TRUE), height = c(3, 1))
tmp2 = hist(rp_average_rank_score/10^3, freq = T, breaks = breaks(rp_average_rank_score/10^3,x0 = 0, 0.1),
main = NA, xlab = NA, ylab = NA, axes = F, col = az_blue)
ax = c(0:2) * 50
axis(2, at = ax, labels = ax, cex.axis = cex.axis)
box(lwd = 1)
par(mar = c(4.1, 3.1, 0, 2.1))
boxplot(rp_average_rank_score/10^3, horizontal = TRUE, outline = TRUE, width = 2,
ylim = c(0, max(rp_average_rank_score/10^3)), frame = T, axes = F, names = "GS", col = az_blue)
ax = c(0:2)
axis(1, at = ax, labels = ax, cex.axis = cex.axis)
title(xlab = "RP")
mtext(expression(displaystyle(x) * 10^3), side = 1, adj = 1, padj = 2, outer = FALSE, cex = cex.axis)
dev.off()
# GS histogram
png(file = "ARRhismer_gs.png", width = 4, height = 4, units = "in", res = res, family = font)
par(mar = c(0, 3.1, 1.1, 2.1), cex.lab = cex.lab, cex.axis = cex.axis, las = 1)
nf = layout(mat = matrix(c(1, 2), 2, 1, byrow = TRUE), height = c(3, 1))
gs_cit = data$gs_total_cites[(!is.na(data$gs_total_cites)) & log_only]
tmp3 = hist(gs_cit/10^5, freq = T, main = NA, xlab = "GS", ylab = NA,
breaks = breaks(gs_cit/10^5, x0 = 0, 0.05), axes = F, col = az_red)
ax = c(0:3) * 250
axis(2, at = ax, labels = ax, cex.axis = cex.axis)
box(lwd = 1)
par(mar = c(4.1, 3.1, 0, 2.1))
boxplot(gs_cit/10^5, horizontal = TRUE, outline = TRUE, ylim = c(0, max(gs_cit/10^5)),
frame = T, axes = F, names = "GS", col = az_red, width = 2)
ax = c(0:2)
axis(1, at = ax, labels = ax, cex.axis = cex.axis)
title(xlab = "GS")
mtext(expression(displaystyle(x) * 10^5), side = 1, adj = 1, padj = 2, outer = FALSE, cex = cex.axis)
dev.off()
# install.packages("formatR")
library(formatR)
a="ARRmosage"
setwd(paste0("F:\\ARR_GitHub\\20160321_ARR\\",a))
tidy_source(source = paste0(a,".R"),indent = 2, width.cutoff = 80,file=paste0(a,"2.R"))
# install.packages("formatR")
library(formatR)
a="ARRmosage"
setwd(paste0("F:\\ARR_GitHub\\20160321_ARR\\",a))
tidy_source(source = paste0(a,".R"),indent = 2, width.cutoff = 80,file=paste0(a,"2.R"))
# clear variables
rm(list=ls(all=TRUE))
# load library
# Install Packages
libraries = c("vcd")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# setting (font, color) for output, depending on choice
font        = "serif" #Helvetica"
res         = 300
max         = 255
grey.colors = c("white",
rgb( 80, 95,108,alpha=108*1.0,maxColorValue = 108),
rgb(  0, 55,108,alpha=140*0.9,maxColorValue = 140),
rgb(  0, 55,108,alpha=180*1.0,maxColorValue = 180)
)
# load data
data = read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
# Computation of frquency table
freq = data.frame()
tab  = c("Yes","No")
for (i.hb in tab) {
for (i.rp in tab) {
for (i.gs in tab) {
if (i.hb == "Yes") {
hb = !is.na(data$hb_commonscore)
} else {
hb = T
}
if (i.rp == "Yes") {
rp = !is.na(data$rp_rank)
} else {
rp = T
}
if (i.gs == "Yes") {
gs = !is.na(data$gs_author)
} else {
gs = T
}
i = dim(freq)[1] + 1
freq[i, "HB"] = i.hb
freq[i, "RP"] = i.rp
freq[i, "GS"] = i.gs
if (i.hb == "Yes" | i.rp == "Yes") {
tmp = dim(data[hb & rp & gs, ])[1]
} else {
tmp = ifelse(i.gs == "Yes", 10000, 0)
}
freq[i, "Freq"] = tmp
}
}
}
freq       = freq[order(freq[,1],freq[,2],freq[,3],decreasing = F),]
colgr      = 1+(freq$HB=="Yes")+(freq$RP=="Yes")+(freq$GS=="Yes")
freq$color = grey.colors[colgr]
m          = freq
# setting (font, color) for output, depending on choice
font           = "serif" # Font Times
width          = 24      # width of plot pdf
height         = 13      # height of plot pdf
fontsize_big   = 44      # font size of the main titles
fontsize_small = 30      # font size of the axes
marg           = 9       # margin
fontsize_cells = 30      # font size of cell labels
# mosaic plot of age groups against Ranking groups
png(file = "ARRmosage.png", width = width, height = height, units = "in", res = res, family = font)
mosaic(~HB + RP + GS, data = m, gp = gpar(fill = m$color), shade = TRUE, direction = c("v","h", "h"),
zero_size = 0, labeling = labeling_values,
gp_text = gpar(fontsize = fontsize_cells,fontface = 2, col = grey.colors[2]),
labeling_args = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1, fontfamily = font),
gp_varnames = gpar(fontsize = fontsize_big, fontface = 1, fontfamily = font)),
keep_aspect_ratio = FALSE, margins = unit(c(marg, marg, 1, marg), "lines"), split_vertical = F)
# gp: coloring according to number of merged rankings
dev.off()
# install.packages("formatR")
library(formatR)
a="ARRmosagegr"
setwd(paste0("F:\\ARR_GitHub\\20160321_ARR\\",a))
tidy_source(source = paste0(a,".R"),indent = 2, width.cutoff = 80,file=paste0(a,"2.R"))
# clear variables
rm(list=ls(all=TRUE))
# Install Packages
libraries = c("vcd")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# define colors
max      = 180
az_red   = rgb(138, 15, 20, alpha = 0.6 * max, maxColorValue = max)
az_green = rgb(0, 87, 44, alpha = 0.65 * max, maxColorValue = max)
az_blue  = rgb(0, 55, 108, alpha = 0.8 * max, maxColorValue = max)
# Setting Image options
font           = "serif" # font Times
fill_color     = c(az_red,az_green,az_blue)
fontsize_big   = 36
fontsize_small = 22
plotsize       = c(16,8)
res            = 300
# load data file
data = read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
data = data[!is.na(data$age_combined), ]
subagehb = na.exclude(data[order(data$hb_commonscore, decreasing = T),
grep(pattern = "age_combined|hb_commonscore", colnames(data))])
subagerp = na.exclude(data[order(as.numeric(data$rp_average_rank_score), decreasing = F),
grep(pattern = "age_combined|rp_average_rank_score", colnames(data))])
subagegs = na.exclude(data[order(data$gs_total_cites, decreasing = T),
grep(pattern = "age_combined|gs_total_cites",colnames(data))])
# data selection
m        = 600
len      = min(dim(subagehb)[1],dim(subagegs)[1],dim(subagerp)[1])
if (m<=len)len = m
subagehb = subagehb[1:len,]
subagerp = subagerp[1:len,]
subagegs = subagegs[1:len,]
# computing table for mosaic function
count    = data.frame()
ages     = c(35,40,45,50,55,60,65,70)
index    = 1
data1    = data[!is.na(data$age_combined),]
for (i in 1:(length(ages) + 1)) {
for (rank in c("HB", "RP", "GS")) {
tmp = get(paste0("subage", tolower(rank)))
count[index, "X"] = index
if (i == 1) {
count[index, "Age"] = paste0("<", ages[i])
tmp$age_combined
count[index, "Freq"] = dim(tmp[tmp$age_combined <= ages[i], ])[1]
} else {
count[index, "Age"] = paste0(ages[i - 1] + 1, "-", ages[i])
count[index, "Freq"] = dim(tmp[tmp$age_combined <= ages[i] & tmp$age_combined >
ages[i - 1], ])[1]
}
if (i == length(ages) + 1) {
count[index, "Age"] = paste0(ages[i - 1], ">")
count[index, "Freq"] = dim(tmp[tmp$age_combined > ages[i - 1], ])[1]
}
count[index, "Ranking"] = rank
count[index, "HB"] = ifelse(rank == "HB", yes = "Yes", no = "No")
count[index, "RP"] = ifelse(rank == "RP", yes = "Yes", no = "No")
count[index, "GS"] = ifelse(rank == "GS", yes = "Yes", no = "No")
index = index + 1
}
}
count[count$Age == "<35", "Age"] = "<"
png(file = "ARRmosagegr.png", width = plotsize[1], height = plotsize[2], units = "in",
res = res, family = font)
# mosaic plot of age groups against Ranking groups
mosaic(~Age + Ranking, data = count, margins = unit(8, "lines"),
gp = gpar(fill = matrix(rep(fill_color, times = 9),ncol = 3, byrow = T), col = 9),
shade = TRUE, direction = c("v", "h"), spacing = spacing_highlighting(start = unit(1, "lines")),
labeling_args = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1, fontfamily = font),
gp_varnames = gpar(fontsize = fontsize_big, fontface = 1, fontfamily = font)),
keep_aspect_ratio = FALSE)
dev.off()
# install.packages("formatR")
library(formatR)
a="ARRmossub"
setwd(paste0("F:\\ARR_GitHub\\20160321_ARR\\",a))
tidy_source(source = paste0(a,".R"),indent = 2, width.cutoff = 80,file=paste0(a,"2.R"))
# install.packages("formatR")
library(formatR)
a="ARRmossub"
setwd(paste0("F:\\ARR_GitHub\\20160321_ARR\\",a))
tidy_source(source = paste0(a,".R"),indent = 2, width.cutoff = 80,file=paste0(a,"2.R"))
# install.packages("formatR")
library(formatR)
a="ARRmossub"
setwd(paste0("F:\\ARR_GitHub\\20160321_ARR\\",a))
tidy_source(source = paste0(a,".R"),indent = 2, width.cutoff = 80,file=paste0(a,"2.R"))
# clear cache and close windows
rm(list=ls(all=TRUE))
graphics.off()
# librariers
libraries = c("vcd","xtable")
lapply(libraries,function(x)if(!(x %in% installed.packages())){install.packages(x)})
lapply(libraries,library,quietly=TRUE,character.only=TRUE)
# color settings
max      = 180
az_red   = rgb(138, 15, 20, alpha = 0.6 * max, maxColorValue = max)
az_green = rgb(0, 87, 44, alpha = 0.65 * max, maxColorValue = max)
az_blue  = rgb(0, 55, 108, alpha = 0.8 * max, maxColorValue = max)
# setting
font           = "serif" # font Times
fill_color     = c(az_red,az_green,az_blue)
cex.lab        = 2.5
cex.axis       = 2
cex.main       = 3.25
fontsize_big   = 36
fontsize_small = 22
plotsize       = c(16,8)
res            = 300
# data input and selection
data = read.csv2("ARRdata.csv",sep=";",dec=",",header = T,stringsAsFactors = FALSE)
hb   = na.exclude(data[,grep(pattern = "hb_commonscore|subject_fields|age_combined",x = colnames(data))])
rp   = na.exclude(data[,grep(pattern = "rp_rank|subject_fields|age_combined",x = colnames(data))])
gs   = na.exclude(data[,grep(pattern = "gs_total_cites|subject_fields|age_combined",x = colnames(data))])
gs   = gs[order(gs$gs_total_cites,decreasing = T),]
m    = 448
len  = min(dim(hb)[1],dim(rp)[1],dim(gs)[1])
if (m<len)len = m
hb   = table(hb[order(hb$hb_commonscore,decreasing = T),][1:len,]$subject_fields)
rp   = table(rp[1:len,]$subject_fields)
gs   = table(gs[1:len,]$subject_fields)
# computing count table of different JEL codes for HB, RP, GS
tab = data.frame()
for (i in Reduce(union, list(names(rp), names(hb), names(gs)))) {
tmp.hb = grep(pattern = i, x = names(hb))
tab["hb_count", i] = ifelse(test = length(tmp.hb) > 0, yes = hb[tmp.hb], no = 0)
tmp.rp = grep(pattern = i, x = names(rp))
tab["rp_count", i] = ifelse(test = length(tmp.rp) > 0, yes = rp[tmp.rp], no = 0)
tmp.gs = grep(pattern = i, x = names(gs))
tab["gs_count", i] = ifelse(test = length(tmp.gs) > 0, yes = gs[tmp.gs], no = 0)
}
tab[, "Total"] = apply(X = tab, MARGIN = 1, FUN = sum)
# preparing data for Plot
tab2              = tab
tab2              = as.data.frame(t(tab2))
tab4              = tab2[-dim(tab2)[1],]
tab2[,"JELcodes"] = rownames(tab2)
for (i in 1:3) {
name = substr(x = colnames(tab2)[i], start = 1, stop = 2)
tmp = cbind(tab2[, c(i, 4)], Ranking = toupper(name))
colnames(tmp)[1] = "Freq"
assign(tolower(paste0(name, "2")), value = tmp)
}
tab3 = rbind(gs2, hb2, rp2)
# creating mosaic plot
png(file = "ARRmossub.png", width = plotsize[1], height = plotsize[2], units = "in",
res = res, family = font)
mosaic(~JELcodes + Ranking, data = tab3[!grepl(pattern = "Total", x = tab3$JELcodes),],
gp = gpar(fill = matrix(rep(fill_color, times = dim(tab2)[1]), ncol = 3, byrow = T)),
shade = TRUE, direction = c("v", "h"), spacing = spacing_highlighting(start = unit(1, "lines")),
labeling_args = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1, fontfamily = font),
gp_varnames = gpar(fontsize = fontsize_big, fontface = 1, fontfamily = font)),
keep_aspect_ratio = FALSE, margins = unit(8, "lines"))
# gp: coloring so that all HB, GS and RP are colored the same
dev.off()
# creating histogram for each ranking (HB, RP, GS)
png(file = "ARRhissub.png", width = plotsize[1], height = plotsize[2], units = "in",
res = res, family = font)
par(mfrow = c(3, 1), las = 1, mar = c(3.1, 5.5, 1, 1))
tab4 = tab4[, order(colnames(tab4))]
for (i in 1:3) {
name = substr(x = colnames(tab4)[i], start = 1, stop = 2)
barplot(height = tab4[, i], names.arg = rownames(tab4), ylab = toupper(name),
col = fill_color[i], cex.names = cex.lab, cex.lab = cex.main, space = 0.05,
axes = F)
ax = c(0:4) * 20
axis(2, at = ax, labels = ax, cex.axis = cex.axis)
box()
}
dev.off()
# install.packages("formatR")
library(formatR)
a="ARRqrqqhb"
setwd(paste0("F:\\ARR_GitHub\\20160321_ARR\\",a))
tidy_source(source = paste0(a,".R"),indent = 2, width.cutoff = 80,file=paste0(a,"2.R"))
# clear variables and close windows
rm(list=ls(all=TRUE))
graphics.off()
# libraries
libraries = c("quantreg") # library(xtable)
lapply(libraries, function(x) if (!(x %in% installed.packages())) {install.packages(x)})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# setting (font, color) for png output
font                 = "serif" # font Times
res                  = 300
#scatterplot
cex                  = 0.5  # size of plot symbol
cex_lab              = 2    # size of label symbols
cex_axis             = 1.5  # size of axes label symbols
cex_main             = 2    # size of main label symbols
#hexbinplot
label.size.main_axis = 2    # size of label symbols
label.size.support   = 1.25 # size of axes label symbols
col.from             = 0.2  # shading from this percentage on (number between 0 and 1)
quant_lap=function(len,opt){
p =(1:len-0.5)/len # Rankit, also (Rank-0.5)/n
if (opt=="normal") QL = qnorm(p)
if (opt=="lognormal") QL = qlnorm(p)
if (opt=="lognormal") QL = qlnorm(p)
if (opt=="laplace") QL = -sign(p-0.5)*log(1-2*abs(p-0.5))
return(QL)
}
# data input
data = read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
# data selection
hb = data[, grepl(pattern = "hb_author", x = colnames(data)) |
(grepl(pattern = "2014|2015", x = colnames(data)) &
grepl(pattern = "_score", x = colnames(data)))]
X_bwllw = as.data.frame(cbind(hb_vwl2015_lw_score = na.exclude(sort(hb[, "hb_vwl2015_lw_score"], decreasing = T)),
hb_bwl2014_lw_score = na.exclude(sort(hb[, "hb_bwl2014_lw_score"], decreasing = T))))
## quantile regression of VWL 2015 LW against BWL 2014 LW
rq_bwl_lw  = rq(hb_vwl2015_lw_score ~ hb_bwl2014_lw_score, data = X_bwllw)
r_bwl_lw   = resid(rq_bwl_lw)
res_bwl_lw = r_bwl_lw/sqrt(var(r_bwl_lw))
col = rep(x = "blue", times = length(res_bwl_lw))
png(file = "ARRqrhbBWLLW.png", width = 6, height = 6, units = "in", res = res, family = font)
par(cex.lab = cex_lab, cex.axis = cex_axis, cex.main = cex_main, las = 1, pty = "s",mar = c(4, 5, 1, 1))
plot(x = X_bwllw$hb_bwl2014_lw_score, y = X_bwllw$hb_vwl2015_lw_score, pch = 21,col = "black",
bg = col, xlab = "BWL LW", ylab = "VWL LW")
abline(rq(hb_vwl2015_lw_score ~ hb_bwl2014_lw_score, data = X_bwllw, tau = 0.5), col = "blue")
abline(lm(X_bwllw$hb_vwl2015_lw_score ~ X_bwllw$hb_bwl2014_lw_score), lty = 2, col = "red")
dev.off()
option = "normal"
QL = quant_lap(length(res_bwl_lw), opt = option)
simpleCap = function(x) {
s = strsplit(x, " ")[[1]]
paste(toupper(substring(s, 1, 1)), substring(s, 2), sep = "", collapse = " ")
}
png(file = paste0("ARRqq", strtrim(x = option, width = 3), "hbBWLLW.png"), height = 6,
width = 6, units = "in", res = res, family = font)
par(cex.lab = cex_lab, cex.axis = cex_axis, cex.main = cex_main, las = 1, pty = "s", mar = c(4, 5, 1, 1))
col1 = col[order(res_bwl_lw)]
qqplot(QL, sort(res_bwl_lw), pch = 21, col = "black", bg = col1,
xlab = paste0("Theo. Quantiles from ", simpleCap(option), " Distr."),
ylab = ("Sample Quantiles of BWL LW"))
lines(QL, QL, type = "l", col = "blue", lwd = 2)
dev.off()
png(paste0("ARRqq", strtrim(x = option, width = 3), "hbBWLLW_Outlierless.png"), height = 6,
width = 6, units = "in", res = res, family = font)
par(cex.lab = cex_lab, cex.axis = cex_axis, cex.main = cex_main, las = 1, pty = "s", mar = c(4, 5, 1, 1))
l = length(res_bwl_lw)
res_bwl_lw_outlierless = sort(res_bwl_lw)[-c(1:3)]  #,(l-3):l)]
QL2 = quant_lap(length(res_bwl_lw_outlierless), opt = option)
col1 = col[order(res_bwl_lw_outlierless)]
qqplot(QL2, sort(res_bwl_lw_outlierless), pch = 21, col = "black", bg = col1,
xlab = paste0("Theo. Quantiles from ", simpleCap(option), " Distr."),
ylab = ("Sample Quantiles of BWL LW"), )
lines(QL2, QL2, type = "l", col = "blue", lwd = 2)
dev.off()
# install.packages("formatR")
library(formatR)
a="ARRscaage"
setwd(paste0("F:\\ARR_GitHub\\20160321_ARR\\",a))
tidy_source(source = paste0(a,".R"),indent = 2, width.cutoff = 80,file=paste0(a,"2.R"))
# install.packages("formatR")
library(formatR)
a="ARRscaage"
setwd(paste0("F:\\ARR_GitHub\\20160321_ARR\\",a))
tidy_source(source = paste0(a,".R"),indent = 2, width.cutoff = 80,file=paste0(a,"2.R"))
# Close windows and clear variables
graphics.off()
rm(list = ls(all = TRUE))
# libraries
libraries = c("hexbin")
lapply(libraries,function(x)if(!(x %in% installed.packages())){install.packages(x)})
lapply(libraries,library,quietly=TRUE,character.only=TRUE)
# data input and selection and preparation
data     = read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
data1    = data[!is.na(data$age_combined), ]
subagehb = na.exclude(data1[order(data1$hb_commonscore, decreasing = T),
grep(pattern = "age_combined|hb_commonscore", colnames(data1))])
subagerp = na.exclude(data1[order(as.numeric(data1$rp_average_rank_score), decreasing = F),
grep(pattern = "age_combined|rp_average_rank_score", colnames(data1))])
subagegs = na.exclude(data1[order(data1$gs_total_cites, decreasing = T),
grep(pattern = "age_combined|gs_total_cites", colnames(data1))])
m      = 600
len    = min(dim(subagehb)[1], dim(subagegs)[1], dim(subagerp)[1])
if (m <= len) len = m
ageshb = subagehb[1:len, "age_combined"]
agesrp = subagerp[1:len, "age_combined"]
agesgs = subagegs[1:len, "age_combined"]
hb     = subagehb[1:len, "hb_commonscore"]
rp     = as.numeric(subagerp[1:len, "rp_average_rank_score"])
gs     = subagegs[1:len, "gs_total_cites"]
# color options
max      = 255
az_red   = rgb(138, 15, 20, alpha = 0.999999 * max, maxColorValue = max)
az_green = rgb(0, 87, 44, alpha = 0.999999 * max, maxColorValue = max)
az_blue  = rgb(0, 55, 108, alpha = 0.999999 * max, maxColorValue = max)
# image setings
font                 = "serif" # font Times
fill_color           = c(az_red,az_green,az_blue)
cex                  = 1
cex.lab              = 2.25
cex.axis             = 1.5
cex.main             = 2
label.size.main_axis = 4
label.size.support   = 2
col.from             = 0.2
res                  = 300
png(file = "ARRscaage.png", width = 10, height = 3.25, units = "in", res = res, family = font)
par(cex.lab = cex.lab, cex.axis = cex.axis, cex.main = cex.main, las = 1, mfrow = c(1,3),
oma = c(0, 0, 1, 0), mar = c(4.1, 5, 1, 1))
# mosaic plot of age groups against Ranking groups
plot(ageshb, hb, xlab = "Age", xlim = c(30, 90), ylab = "HB", ylim = c(0, 30), pch = 16,
col = az_green, cex = cex)
plot(agesrp, rp/100, xlab = "Age", xlim = c(30, 90), ylab = "RP", ylim = c(ceiling(max(rp/100)),0),
pch = 16, col = az_blue, cex = cex, yaxt = "n")
mtext(expression(displaystyle(x) * 10^2), adj = 0, padj = 0, outer = FALSE)
axis(2, at = c(3:0) * 2, labels = c(3:0) * 2)
plot(agesgs, gs/10^5, xlab = "Age", xlim = c(30, 90), ylab = "GS", pch = 16, col = az_red,
cex = cex)
mtext(expression(displaystyle(x) * 10^5), adj = 0, padj = 0, outer = FALSE)
dev.off()
# Close windows and clear variables
graphics.off()
rm(list = ls(all = TRUE))
# libraries
libraries = c("hexbin")
lapply(libraries,function(x)if(!(x %in% installed.packages())){install.packages(x)})
lapply(libraries,library,quietly=TRUE,character.only=TRUE)
# data input and selection and preparation
data     = read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
data1    = data[!is.na(data$age_combined), ]
subagehb = na.exclude(data1[order(data1$hb_commonscore, decreasing = T),
grep(pattern = "age_combined|hb_commonscore", colnames(data1))])
subagerp = na.exclude(data1[order(as.numeric(data1$rp_average_rank_score), decreasing = F),
grep(pattern = "age_combined|rp_average_rank_score", colnames(data1))])
subagegs = na.exclude(data1[order(data1$gs_total_cites, decreasing = T),
grep(pattern = "age_combined|gs_total_cites", colnames(data1))])
m      = 600
len    = min(dim(subagehb)[1], dim(subagegs)[1], dim(subagerp)[1])
if (m <= len) len = m
ageshb = subagehb[1:len, "age_combined"]
agesrp = subagerp[1:len, "age_combined"]
agesgs = subagegs[1:len, "age_combined"]
hb     = subagehb[1:len, "hb_commonscore"]
rp     = as.numeric(subagerp[1:len, "rp_average_rank_score"])
gs     = subagegs[1:len, "gs_total_cites"]
# color options
max      = 255
az_red   = rgb(138, 15, 20, alpha = 0.999999 * max, maxColorValue = max)
az_green = rgb(0, 87, 44, alpha = 0.999999 * max, maxColorValue = max)
az_blue  = rgb(0, 55, 108, alpha = 0.999999 * max, maxColorValue = max)
# image setings
font                 = "serif" # font Times
fill_color           = c(az_red,az_green,az_blue)
cex                  = 1
cex.lab              = 2.25
cex.axis             = 1.5
cex.main             = 2
label.size.main_axis = 4
label.size.support   = 2
col.from             = 0.2
res                  = 300
png(file = "ARRscaage.png", width = 10, height = 3.25, units = "in", res = res, family = font)
par(cex.lab = cex.lab, cex.axis = cex.axis, cex.main = cex.main, las = 1, mfrow = c(1,3),
oma = c(0, 0, 1, 0), mar = c(4.1, 5, 1, 1))
# mosaic plot of age groups against Ranking groups
plot(ageshb, hb, xlab = "Age", xlim = c(30, 90), ylab = "HB", ylim = c(0, 30), pch = 16,
col = az_green, cex = cex)
plot(agesrp, rp/100, xlab = "Age", xlim = c(30, 90), ylab = "RP", ylim = c(ceiling(max(rp/100)),0),
pch = 16, col = az_blue, cex = cex, yaxt = "n")
mtext(expression(displaystyle(x) * 10^2), adj = 0, padj = 0, outer = FALSE)
axis(2, at = c(3:0) * 2, labels = c(3:0) * 2)
plot(agesgs, gs/10^5, xlab = "Age", xlim = c(30, 90), ylab = "GS", pch = 16, col = az_red,
cex = cex)
mtext(expression(displaystyle(x) * 10^5), adj = 0, padj = 0, outer = FALSE)
dev.off()
