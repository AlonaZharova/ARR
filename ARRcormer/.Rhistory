rp          = as.numeric(subagerp[, "rp_score"])
gs          = subagegs[, "gs_total_cites"]
# setting colors
max      = 255
az_red   = rgb(138, 15, 20,alpha=0.999999 *max,maxColorValue = max)
az_green = rgb(  0, 87, 44,alpha=0.999999 *max,maxColorValue = max)
az_blue  = rgb(  0, 55,108,alpha=0.999999 *max,maxColorValue = max)
# setting (font, size etc.) for paper or presentation output, depending on choice: pub="paper" or pub="presentation"
font="Helvetica"
label.size.main_axis=2.5
label.size.support=2
col.from=0.2
fontsize_big=12
fontsize_small=10
# Close windows and clear variables
graphics.off()
rm(list = ls(all = TRUE))
# read the data, then choose variables
if (!require(package = "hexbin"))
{
install.packages("hexbin")
require("hexbin")
}
#library("hexbin")
data<- read.csv2("20150701hb_repec_and_google_merge_with_data.csv",sep=";",dec=",",header = T,stringsAsFactors = FALSE)
# ---------------------------------------------------------------------
# Project:      ARR
# ---------------------------------------------------------------------
# Quantlet:     ARRmossub
# ---------------------------------------------------------------------
# Description:  ARRmossub pictures the linear correlation between 43 score
#               values of HB, RePEc and repec in an upper triangular matrix.
#               The values are clustered.
# ---------------------------------------------------------------------
# Usage:        ARRmossub
# ---------------------------------------------------------------------
# Inputs:       20160118hb_repec_and_google_merge_with_data.csv
#                 size - 3178 x 143
#                 rows - 3178 different researcher of either RePEc,
#                           Handelsblatt ranking or both and their
#                           Google Scholar data
#                 columns - 143 = 48 columns Handelsblatt
#                               + 77 columns RePEc
#                               + 16 columns Google Scholar
#                               +  2 columns age_combined, subject fields
# ---------------------------------------------------------------------
# Output:       ARRmossub.pdf
# ---------------------------------------------------------------------
# Keywords:     correlation, correlation matrix, visualisation of correlation matrix
#               correlation clustering
# ---------------------------------------------------------------------
# See also:
# ---------------------------------------------------------------------
# Author:       Marius Sterling on behalf of Alona Zharova 20160118
# ---------------------------------------------------------------------
# clear cache and close windows
rm(list=ls(all=TRUE))
graphics.off()
max      = 180
az_red   = rgb(138, 15, 20,alpha=0.6 *max,maxColorValue = max)
az_green = rgb(  0, 87, 44,alpha=0.65*max,maxColorValue = max)
az_blue  = rgb(  0, 55,108,alpha=0.8 *max,maxColorValue = max)
pub="presentation"
pub="paper"
if (pub=="paper")
{
font="Times"
fill_color=c(az_red,az_green,az_blue)
fontsize_big=36
fontsize_small=22
plotsize=c(16,8)
path="F:\\SFB 649 Forschung\\LaTeX\\ARR - Paper\\20160209 Zha Mih Hae Academic Rankings Paper\\Figures\\"
}else if(pub=="presentation"){
font="Helvetica"
fill_color=c(az_red,az_green,az_blue)
fontsize_big=38
fontsize_small=22
plotsize=c(16,8)
path="F:\\SFB 649 Forschung\\LaTeX\\ARR - Presentation\\20160118 Zha Mih Hae Academic Rankings Presentation\\Figures\\"
}
library(xtable)
# activating required packages, if they are not installed they first get installed
# if (!require(corrplot))
# {
#   install.packages("corrplot")
#   require(corrplot)
# }
data<- read.csv2("20160118hb_repec_and_google_merge_with_data.csv",sep=";",dec=",",header = T,stringsAsFactors = FALSE)
# data$hb_author
hb=as.data.frame(table(data[!is.na(data$hb_author),]$subject_fields),stringsAsFactors = F)
rp=as.data.frame(table(data[!is.na(data$rp_author),]$subject_fields),stringsAsFactors = F)
gs=as.data.frame(table(data[!is.na(data$gs_author),]$subject_fields),stringsAsFactors = F)
hb=table(data[!is.na(data$hb_author),]$subject_fields)
rp=table(data[!is.na(data$rp_author),]$subject_fields)
gs=table(data[!is.na(data$gs_author),]$subject_fields)
tab=data.frame()
for (i in Reduce(union,list(names(rp),names(hb),names(gs))))
{
tmp.hb=grep(pattern = i,x = names(hb))
tab["hb_count",i]=ifelse(test = length(tmp.hb)>0,yes = hb[tmp.hb],no=0)
tmp.rp=grep(pattern = i,x = names(rp))
tab["rp_count",i]=ifelse(test = length(tmp.rp)>0,yes = rp[tmp.rp],no=0)
tmp.gs=grep(pattern = i,x = names(gs))
tab["gs_count",i]=ifelse(test = length(tmp.gs)>0,yes = gs[tmp.gs],no=0)
}
# tab=as.data.frame(tab)
# typeof(tab)
tab[,"total"]=apply(X = tab,MARGIN = 1,FUN = sum)
tab["hb_proc",]=round(tab["hb_count",]/tab["hb_count","total"]*100,4)
tab["rp_proc",]=round(tab["rp_count",]/tab["rp_count","total"]*100,4)
tab["gs_proc",]=round(tab["gs_count",]/tab["gs_count","total"]*100,4)
tab=as.data.frame(tab[c(1,4,2,5,3,6),])
options(xtable.floating=F)
# xy<-xtable(t(tab[,1:3]),digits=c(0,0,2,0,2,0,2),)
# autoformat(xy)
#
# df <- as.data.frame(matrix(rnorm(22), nrow=2))
# print(xtable(t( apply("format", df, digits=c(0,0,1,0,1,2,0,1,0,0,2)))))
#
# mapply("format", df, digits=c(0,0,1,0,1,2,0,1,0,0,2))
#
# format(0.34243,digits = 1)
# df[1,12]=NA
# format(df,trim=T)
# fixed(df,3)
format_decpla<-function(num,digits){(format(round(num,digits),nsmall=digits))}
# apply(X = df,MARGIN = 1,FUN = format_decpla,digits=c(0,1))
# apply(X = tab,MARGIN = 2,FUN = format_decpla,digits=1)
# mapply("sum",t(df))#,na.rm=c(F,T))
# lapply(X = df,INDEX = 1,FUN = sum)
tab_latex=tab
for (i in 1:dim(tab)[1])
{
count=grepl(pattern = "count",x = rownames(tab[i,]))
tab_latex[i,]=as.list(format_decpla(num=as.double(tab[i,]),digits=ifelse(test = count,yes = 0,no = 2)))
}
tab_latex
xtable(tab)
tab2=tab[grepl(pattern = "count",x =rownames(tab)),]
tab2=as.data.frame(t(tab2))
tab2[,"subject_fields"]=rownames(tab2)
for (i in 1:3)
{
name=substr(x = colnames(tab2)[i],start=1,stop=2)
tmp=cbind(tab2[,c(i,4)],ranking=toupper(name))
colnames(tmp)[1]="Freq"
assign(paste0(name,"2"),value = tmp)
}
a=rbind(gs2,hb2,rp2)
path=""
pdf(file=paste0(path,"ARRmossub.pdf"),width=plotsize[1], height=plotsize[2],fonts = font)
mosaic(~subject_fields+ranking, data=a[!grepl(pattern = "total",x = a$subject_fields),],
gp                = gpar(fill =matrix(rep(fill_color,times =dim(tab2)[1]),ncol=3,byrow = T),col = dim(tab2)[1]), # coloring so that all HB, GS and RP are colored the same
shade             = TRUE,                                                                  # coloring according to gp
direction         = c("v", "h"),                                                           # setting the axis
spacing           = spacing_highlighting(start = unit(1, "lines")),                        # spacing between age groups
labeling_args     = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1,fontfamily = font),
gp_varnames = gpar(fontsize =fontsize_big, fontface = 1,fontfamily=font)),      # settings for the axis labels (font, fontsize)
keep_aspect_ratio = FALSE,                                                                 # allowing different length and width of plot, here fitted to pdf size
# margins           = unit(8, "lines")                                                       # spacing from margins
)
dev.off()
file.show(file=paste0(path,"ARRmossub.pdf"))
# ---------------------------------------------------------------------
# Project:      ARR
# ---------------------------------------------------------------------
# Quantlet:     ARRmossub
# ---------------------------------------------------------------------
# Description:  ARRmossub pictures the linear correlation between 43 score
#               values of HB, RePEc and repec in an upper triangular matrix.
#               The values are clustered.
# ---------------------------------------------------------------------
# Usage:        ARRmossub
# ---------------------------------------------------------------------
# Inputs:       20160118hb_repec_and_google_merge_with_data.csv
#                 size - 3178 x 143
#                 rows - 3178 different researcher of either RePEc,
#                           Handelsblatt ranking or both and their
#                           Google Scholar data
#                 columns - 143 = 48 columns Handelsblatt
#                               + 77 columns RePEc
#                               + 16 columns Google Scholar
#                               +  2 columns age_combined, subject fields
# ---------------------------------------------------------------------
# Output:       ARRmossub.pdf
# ---------------------------------------------------------------------
# Keywords:     correlation, correlation matrix, visualisation of correlation matrix
#               correlation clustering
# ---------------------------------------------------------------------
# See also:
# ---------------------------------------------------------------------
# Author:       Marius Sterling on behalf of Alona Zharova 20160118
# ---------------------------------------------------------------------
# clear cache and close windows
rm(list=ls(all=TRUE))
graphics.off()
library(xtable)
library(vcd)
# activating required packages, if they are not installed they first get installed
# if (!require(corrplot))
# {
#   install.packages("corrplot")
#   require(corrplot)
# }
max      = 180
az_red   = rgb(138, 15, 20,alpha=0.6 *max,maxColorValue = max)
az_green = rgb(  0, 87, 44,alpha=0.65*max,maxColorValue = max)
az_blue  = rgb(  0, 55,108,alpha=0.8 *max,maxColorValue = max)
pub="presentation"
pub="paper"
if (pub=="paper")
{
font="Times"
fill_color=c(az_red,az_green,az_blue)
fontsize_big=36
fontsize_small=22
plotsize=c(16,8)
path="F:\\SFB 649 Forschung\\LaTeX\\ARR - Paper\\20160209 Zha Mih Hae Academic Rankings Paper\\Figures\\"
}else if(pub=="presentation"){
font="Helvetica"
fill_color=c(az_red,az_green,az_blue)
fontsize_big=38
fontsize_small=22
plotsize=c(16,8)
path="F:\\SFB 649 Forschung\\LaTeX\\ARR - Presentation\\20160118 Zha Mih Hae Academic Rankings Presentation\\Figures\\"
}
data<- read.csv2("20160118hb_repec_and_google_merge_with_data.csv",sep=";",dec=",",header = T,stringsAsFactors = FALSE)
# data$hb_author
hb=as.data.frame(table(data[!is.na(data$hb_author),]$subject_fields),stringsAsFactors = F)
rp=as.data.frame(table(data[!is.na(data$rp_author),]$subject_fields),stringsAsFactors = F)
gs=as.data.frame(table(data[!is.na(data$gs_author),]$subject_fields),stringsAsFactors = F)
hb=table(data[!is.na(data$hb_author),]$subject_fields)
rp=table(data[!is.na(data$rp_author),]$subject_fields)
gs=table(data[!is.na(data$gs_author),]$subject_fields)
tab=data.frame()
for (i in Reduce(union,list(names(rp),names(hb),names(gs))))
{
tmp.hb=grep(pattern = i,x = names(hb))
tab["hb_count",i]=ifelse(test = length(tmp.hb)>0,yes = hb[tmp.hb],no=0)
tmp.rp=grep(pattern = i,x = names(rp))
tab["rp_count",i]=ifelse(test = length(tmp.rp)>0,yes = rp[tmp.rp],no=0)
tmp.gs=grep(pattern = i,x = names(gs))
tab["gs_count",i]=ifelse(test = length(tmp.gs)>0,yes = gs[tmp.gs],no=0)
}
# tab=as.data.frame(tab)
# typeof(tab)
tab[,"total"]=apply(X = tab,MARGIN = 1,FUN = sum)
tab["hb_proc",]=round(tab["hb_count",]/tab["hb_count","total"]*100,4)
tab["rp_proc",]=round(tab["rp_count",]/tab["rp_count","total"]*100,4)
tab["gs_proc",]=round(tab["gs_count",]/tab["gs_count","total"]*100,4)
tab=as.data.frame(tab[c(1,4,2,5,3,6),])
options(xtable.floating=F)
# xy<-xtable(t(tab[,1:3]),digits=c(0,0,2,0,2,0,2),)
# autoformat(xy)
#
# df <- as.data.frame(matrix(rnorm(22), nrow=2))
# print(xtable(t( apply("format", df, digits=c(0,0,1,0,1,2,0,1,0,0,2)))))
#
# mapply("format", df, digits=c(0,0,1,0,1,2,0,1,0,0,2))
#
# format(0.34243,digits = 1)
# df[1,12]=NA
# format(df,trim=T)
# fixed(df,3)
format_decpla<-function(num,digits){(format(round(num,digits),nsmall=digits))}
# apply(X = df,MARGIN = 1,FUN = format_decpla,digits=c(0,1))
# apply(X = tab,MARGIN = 2,FUN = format_decpla,digits=1)
# mapply("sum",t(df))#,na.rm=c(F,T))
# lapply(X = df,INDEX = 1,FUN = sum)
tab_latex=tab
for (i in 1:dim(tab)[1])
{
count=grepl(pattern = "count",x = rownames(tab[i,]))
tab_latex[i,]=as.list(format_decpla(num=as.double(tab[i,]),digits=ifelse(test = count,yes = 0,no = 2)))
}
tab_latex
xtable(tab)
tab2=tab[grepl(pattern = "count",x =rownames(tab)),]
tab2=as.data.frame(t(tab2))
tab2[,"subject_fields"]=rownames(tab2)
for (i in 1:3)
{
name=substr(x = colnames(tab2)[i],start=1,stop=2)
tmp=cbind(tab2[,c(i,4)],ranking=toupper(name))
colnames(tmp)[1]="Freq"
assign(paste0(name,"2"),value = tmp)
}
a=rbind(gs2,hb2,rp2)
path=""
pdf(file=paste0(path,"ARRmossub.pdf"),width=plotsize[1], height=plotsize[2],fonts = font)
mosaic(~subject_fields+ranking, data=a[!grepl(pattern = "total",x = a$subject_fields),],
gp                = gpar(fill =matrix(rep(fill_color,times =dim(tab2)[1]),ncol=3,byrow = T),col = dim(tab2)[1]), # coloring so that all HB, GS and RP are colored the same
shade             = TRUE,                                                                  # coloring according to gp
direction         = c("v", "h"),                                                           # setting the axis
spacing           = spacing_highlighting(start = unit(1, "lines")),                        # spacing between age groups
labeling_args     = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1,fontfamily = font),
gp_varnames = gpar(fontsize =fontsize_big, fontface = 1,fontfamily=font)),      # settings for the axis labels (font, fontsize)
keep_aspect_ratio = FALSE,                                                                 # allowing different length and width of plot, here fitted to pdf size
# margins           = unit(8, "lines")                                                       # spacing from margins
)
dev.off()
file.show(file=paste0(path,"ARRmossub.pdf"))
tab2=tab[grepl(pattern = "count",x =rownames(tab)),]
tab2=as.data.frame(t(tab2))
tab2[,"subject_fields"]=rownames(tab2)
tab2
for (i in 1:3)
{
name=substr(x = colnames(tab2)[i],start=1,stop=2)
tmp=cbind(tab2[,c(i,4)],ranking=toupper(name))
colnames(tmp)[1]="Freq"
assign(paste0(name,"2"),value = tmp)
}
name=substr(x = colnames(tab2)[i],start=1,stop=2)
i
name=substr(x = colnames(tab2)[i],start=1,stop=2)
tmp=cbind(tab2[,c(i,4)],ranking=toupper(name))
tab2
tab
2*1:90
c=1
for (i in 2*1:90)
c=c*i
c
2*1:180
c=1
for (i in 2*1:180)
c=c*i
c
c=1
for (i in 2*1:180)
c=c*i
c
c=1
for (i in 2*1:100)
c=c*i
c
c=1
for (i in 2*1:120)
c=c*i
c
c=1
for (i in 2*1:145)
c=c*i
c
c=1
for (i in 2*1:150)
c=c*i
c
c=1
for (i in 2*1:175)
c=c*i
c
c=1
for (i in 2*1:165)
c=c*i
c
c=1
for (i in 2*1:155)
c=c*i
c
c=1
for (i in 2*1:153)
c=c*i
c
c=1
for (i in 2*1:152)
c=c*i
c
c=1
for (i in 2*1:151)
c=c*i
c
c=1
for (i in 2*1:150)
c=c*i
c
library(formatR)
tidy_source(indent = 2, width.cutoff = 80,file="ARRcormer.R")
tidy_source(source = "ARRcormer2.R",indent = 2, width.cutoff = 80,file="ARRcormer.R")
sewd("F:\\ARR_GitHub\20160321_ARR\\ARRcormer")
setwd("F:\\ARR_GitHub\20160321_ARR\\ARRcormer")
setwd("F:\\ARR_GitHub\\20160321_ARR\\ARRcormer")
tidy_source(source = "ARRcormer2.R",indent = 2, width.cutoff = 80,file="ARRcormer.R")
# clear istory
rm(list = ls(all = TRUE))
graphics.off()
# settings
font = "Times"
res = 300
# activating required packages, if they are not installed they first get
# installed
libraries = c("corrplot")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# data input and selection of all score values (no rankings)
data <- read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
data = data[!is.na(data$hb_commonscore) & !is.na(data$rp_author) & !is.na(data$gs_author),
]
data2 = data[, grepl(pattern = "hb_age_today|hb_commonscore", x = colnames(data)) |
(grepl(pattern = "rp_", x = colnames(data)) & grepl(pattern = "score", x = colnames(data))) |
(grepl(pattern = "gs_total_cites|gs_h_index|gs_i_index", x = colnames(data)))]
x = data2
colnames(x) = gsub(pattern = "_score", replacement = "", x = colnames(x))
# computing the correlation matrix
mcor = cor(x, method = c("pearson"), use = "pairwise.complete.obs")  # 'pearson', 'kendall', 'spearman'
# plot of the correlation matrix
pdf(file = paste0(path, "ARRcormer2.pdf"), width = 10, height = 10, family = font,
pointsize = 7)
corrplot(mcor, order = "AOE", method = "color", type = "upper", tl.col = "black",
cl.cex = 1.5, tl.cex = 1.5, addCoef.col = "black", addCoef.cex = 1, addCoefasPercent = TRUE,
p.mat = 1 - abs(mcor), sig.level = 0.75, insig = "blank")
dev.off()
# type=upper: upper triangular matrix!  order: 'orignial'= as is in the matrix,
# order='AOE' for the angular order of the eigenvectors.
# clear istory
rm(list = ls(all = TRUE))
graphics.off()
# settings
font = "Times"
res = 300
# activating required packages, if they are not installed they first get
# installed
libraries = c("corrplot")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# data input and selection of all score values (no rankings)
data <- read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
data = data[!is.na(data$hb_commonscore) & !is.na(data$rp_author) & !is.na(data$gs_author),
]
data2 = data[, grepl(pattern = "hb_age_today|hb_commonscore", x = colnames(data)) |
(grepl(pattern = "rp_", x = colnames(data)) & grepl(pattern = "score", x = colnames(data))) |
(grepl(pattern = "gs_total_cites|gs_h_index|gs_i_index", x = colnames(data)))]
x = data2
colnames(x) = gsub(pattern = "_score", replacement = "", x = colnames(x))
# data input and selection of all score values (no rankings)
data <- read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
data = data[!is.na(data$hb_commonscore) & !is.na(data$rp_author) & !is.na(data$gs_author),
]
data2 = data[, grepl(pattern = "hb_age_today|hb_commonscore", x = colnames(data)) |
(grepl(pattern = "rp_", x = colnames(data)) & grepl(pattern = "score", x = colnames(data))) |
(grepl(pattern = "gs_total_cites|gs_h_index|gs_i_index", x = colnames(data)))]
x = data2
colnames(x) = gsub(pattern = "_score", replacement = "", x = colnames(x))
# clear istory
rm(list = ls(all = TRUE))
graphics.off()
# settings
font = "Times"
res = 300
# activating required packages, if they are not installed they first get
# installed
libraries = c("corrplot")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# data input and selection of all score values (no rankings)
data <- read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
data = data[!is.na(data$hb_commonscore) & !is.na(data$rp_author) & !is.na(data$gs_author),]
data2 = data[, grepl(pattern = "hb_age_today|hb_commonscore", x = colnames(data)) |
(grepl(pattern = "rp_", x = colnames(data)) & grepl(pattern = "score", x = colnames(data))) |
(grepl(pattern = "gs_total_cites|gs_h_index|gs_i_index", x = colnames(data)))]
x = data2
colnames(x) = gsub(pattern = "_score", replacement = "", x = colnames(x))
# computing the correlation matrix
mcor = cor(x, method = c("pearson"), use = "pairwise.complete.obs")  # 'pearson', 'kendall', 'spearman'
# plot of the correlation matrix
path
png(file = "ARRcormer.png", width = 10, height = 10, units="in",res=res, family = font, pointsize = 7)
corrplot(mcor, order = "AOE", method = "color", type = "upper", tl.col = "black",
cl.cex = 1.5, tl.cex = 1.5, addCoef.col = "black", addCoef.cex = 1, addCoefasPercent = TRUE,
p.mat = 1 - abs(mcor), sig.level = 0.75, insig = "blank")
dev.off()
# clear istory
rm(list = ls(all = TRUE))
graphics.off()
# settings
font = "Times"
res = 300
# activating required packages, if they are not installed they first get
# installed
libraries = c("corrplot")
lapply(libraries, function(x) if (!(x %in% installed.packages())) {
install.packages(x)
})
lapply(libraries, library, quietly = TRUE, character.only = TRUE)
# data input and selection of all score values (no rankings)
data <- read.csv2("ARRdata.csv", sep = ";", dec = ",", header = T, stringsAsFactors = FALSE)
data = data[!is.na(data$hb_commonscore) & !is.na(data$rp_author) & !is.na(data$gs_author),]
data2 = data[, grepl(pattern = "hb_age_today|hb_commonscore", x = colnames(data)) |
(grepl(pattern = "rp_", x = colnames(data)) & grepl(pattern = "score", x = colnames(data))) |
(grepl(pattern = "gs_total_cites|gs_h_index|gs_i_index", x = colnames(data)))]
x = data2
colnames(x) = gsub(pattern = "_score", replacement = "", x = colnames(x))
# computing the correlation matrix
mcor = cor(x, method = c("pearson"), use = "pairwise.complete.obs")  # 'pearson', 'kendall', 'spearman'
# plot of the correlation matrix
png(file = "ARRcormer.png", width = 10, height = 10, units="in",res=res, family = font, pointsize = 7)
corrplot(mcor, order = "AOE", method = "color", type = "upper", tl.col = "black",
cl.cex = 1.5, tl.cex = 1.5, addCoef.col = "black", addCoef.cex = 1, addCoefasPercent = TRUE,
p.mat = 1 - abs(mcor), sig.level = 0.75, insig = "blank")
dev.off()
# type=upper: upper triangular matrix!  order: 'orignial'= as is in the matrix,
# order='AOE' for the angular order of the eigenvectors.
mcor
size(x)
dim(mcor)
