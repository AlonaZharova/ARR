# clear cache and close windows
rm(list=ls(all=TRUE))
graphics.off()
# librariers
libraries = c("vcd","xtable")
lapply(libraries,function(x)if(!(x %in% installed.packages())){install.packages(x)})
lapply(libraries,library,quietly=TRUE,character.only=TRUE)
# color settings
max      = 180
az_red   = rgb(138, 15, 20,alpha=0.6 *max,maxColorValue = max)
az_green = rgb(  0, 87, 44,alpha=0.65*max,maxColorValue = max)
az_blue  = rgb(  0, 55,108,alpha=0.8 *max,maxColorValue = max)
# setting
font           = "serif" # font Times
fill_color     = c(az_red,az_green,az_blue)
cex.lab        = 2.5
cex.axis       = 2
cex.main       = 3.25
fontsize_big   = 36
fontsize_small = 22
plotsize       = c(16,8)
res            = 300
# data input and selection
data = read.csv2("ARRdata.csv",sep=";",dec=",",header = T,stringsAsFactors = FALSE)
hb   = na.exclude(data[,grep(pattern = "hb_commonscore|subject_fields|age_combined",x = colnames(data))])
rp   = na.exclude(data[,grep(pattern = "rp_rank|subject_fields|age_combined",x = colnames(data))])
gs   = na.exclude(data[,grep(pattern = "gs_total_cites|subject_fields|age_combined",x = colnames(data))])
gs   = gs[order(gs$gs_total_cites,decreasing = T),]
m    = 448
len  = min(dim(hb)[1],dim(rp)[1],dim(gs)[1])
if (m<len)len = m
hb   = table(hb[order(hb$hb_commonscore,decreasing = T),][1:len,]$subject_fields)
rp   = table(rp[1:len,]$subject_fields)
gs   = table(gs[1:len,]$subject_fields)
# computing count table of different JEL codes for HB, RP, GS
tab = data.frame()
for (i in Reduce(union,list(names(rp),names(hb),names(gs))))
{
tmp.hb=grep(pattern = i,x = names(hb))
tab["hb_count",i]=ifelse(test = length(tmp.hb)>0,yes = hb[tmp.hb],no=0)
tmp.rp=grep(pattern = i,x = names(rp))
tab["rp_count",i]=ifelse(test = length(tmp.rp)>0,yes = rp[tmp.rp],no=0)
tmp.gs=grep(pattern = i,x = names(gs))
tab["gs_count",i]=ifelse(test = length(tmp.gs)>0,yes = gs[tmp.gs],no=0)
}
tab[,"Total"]   = apply(X = tab,MARGIN = 1,FUN = sum)
tab_count       = tab
tab["hb_proc",] = round(tab["hb_count",]/tab["hb_count","Total"]*100,4)
tab["rp_proc",] = round(tab["rp_count",]/tab["rp_count","Total"]*100,4)
tab["gs_proc",] = round(tab["gs_count",]/tab["gs_count","Total"]*100,4)
tab             = as.data.frame(tab[c(1,4,2,5,3,6),])
tab_proc        = tab[grep(pattern = "_proc",x = rownames(tab)),]
options(xtable.floating=F)
format_decpla   = function(num,digits){(format(round(num,digits),nsmall=digits))}
tab_latex=tab
for (i in 1:dim(tab)[1])
{
count=grepl(pattern = "count",x = rownames(tab[i,]))
tab_latex[i,]=as.list(format_decpla(num=as.double(tab[i,]),digits=ifelse(test = count,yes = 0,no = 2)))
}
rownames(tab_latex)=c("HB","\\%","RP","\\% ","GS","\\%  ")
rownames(tab_count) = toupper(gsub(pattern = "_count",replacement = "",x = rownames(tab_count)))
print(xtable(tab_count,align="c|rrrrrrrrrrrrrrrrrrr|r",digits = 0),sanitize.text.function=function(x){x})
rownames(tab_proc)=toupper(gsub(pattern = "_proc",replacement = "",x = rownames(tab_proc)))
print(xtable(tab_proc[,1:10],align=c("c|",rep(x = ">{\\raggedleft\\arraybackslash}p{1cm}",times=10)),digits = 2,),sanitize.text.function=function(x){x})
print(xtable(tab_proc[,11:20],align=c("c|",rep(x = ">{\\raggedleft\\arraybackslash}p{1cm}",times=9),"|>{\\raggedleft\\arraybackslash}p{1cm}"),digits = 2,),sanitize.text.function=function(x){x})
############################################################################
#######Mosaic plot
############################################################################
# preparing data for Plot
tab2              = tab_count #tab[grepl(pattern = "count",x =rownames(tab)),]
tab2              = as.data.frame(t(tab2))
tab4              = tab2[-dim(tab2)[1],]
tab2[,"JELcodes"] = rownames(tab2)
for (i in 1:3)
{
name=substr(x = colnames(tab2)[i],start=1,stop=2)
tmp=cbind(tab2[,c(i,4)],Ranking=toupper(name))
colnames(tmp)[1]="Freq"
assign(tolower(paste0(name,"2")),value = tmp)
}
tab3=rbind(gs2,hb2,rp2)
# creating mosaic plot
png(file="ARRmossub.png",width=plotsize[1], height=plotsize[2],units="in",res=res,family = font)
mosaic(~JELcodes+Ranking, data=tab3[!grepl(pattern = "Total",x = tab3$JELcodes),],
gp                = gpar(fill =matrix(rep(fill_color,times =dim(tab2)[1]),ncol=3,byrow = T)), # coloring so that all HB, GS and RP are colored the same
shade             = TRUE,                                                                  # coloring according to gp
direction         = c("v", "h"),                                                           # setting the axis
spacing           = spacing_highlighting(start = unit(1, "lines")),                        # spacing between age groups
labeling_args     = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1,fontfamily = font),
gp_varnames = gpar(fontsize =fontsize_big, fontface = 1,fontfamily=font)),      # settings for the axis labels (font, fontsize)
keep_aspect_ratio = FALSE,                                                                 # allowing different length and width of plot, here fitted to pdf size
margins           = unit(8, "lines")                                                      # spacing from margins
)
dev.off()
# creating histogram for each ranking (HB, RP, GS)
png(file="ARRhissub.png",width=plotsize[1], height=plotsize[2],units="in",res=res,family = font)
par(mfrow=c(3,1),las=1,mar=c(3.1,5.5,1,1))
tab4=tab4[,order(colnames(tab4))]
for (i in 1:3)
{
name=substr(x = colnames(tab4)[i],start = 1,stop = 2)
barplot(height = tab4[,i],
names.arg = rownames(tab4),
ylab = toupper(name),
col = fill_color[i],
# cex.axis=cex.axis,
cex.names=cex.lab,
cex.lab=cex.main,
space=0.05,
axes=F
)
ax=c(0:4)*20
axis(2,at=ax,labels=ax,cex.axis=cex.axis)
box()
}
dev.off()
# clear cache and close windows
rm(list=ls(all=TRUE))
graphics.off()
# librariers
libraries = c("vcd","xtable")
lapply(libraries,function(x)if(!(x %in% installed.packages())){install.packages(x)})
lapply(libraries,library,quietly=TRUE,character.only=TRUE)
# color settings
max      = 180
az_red   = rgb(138, 15, 20,alpha=0.6 *max,maxColorValue = max)
az_green = rgb(  0, 87, 44,alpha=0.65*max,maxColorValue = max)
az_blue  = rgb(  0, 55,108,alpha=0.8 *max,maxColorValue = max)
# setting
font           = "serif" # font Times
fill_color     = c(az_red,az_green,az_blue)
cex.lab        = 2.5
cex.axis       = 2
cex.main       = 3.25
fontsize_big   = 36
fontsize_small = 22
plotsize       = c(16,8)
res            = 300
# data input and selection
data = read.csv2("ARRdata.csv",sep=";",dec=",",header = T,stringsAsFactors = FALSE)
hb   = na.exclude(data[,grep(pattern = "hb_commonscore|subject_fields|age_combined",x = colnames(data))])
rp   = na.exclude(data[,grep(pattern = "rp_rank|subject_fields|age_combined",x = colnames(data))])
gs   = na.exclude(data[,grep(pattern = "gs_total_cites|subject_fields|age_combined",x = colnames(data))])
gs   = gs[order(gs$gs_total_cites,decreasing = T),]
m    = 448
len  = min(dim(hb)[1],dim(rp)[1],dim(gs)[1])
if (m<len)len = m
hb   = table(hb[order(hb$hb_commonscore,decreasing = T),][1:len,]$subject_fields)
rp   = table(rp[1:len,]$subject_fields)
gs   = table(gs[1:len,]$subject_fields)
# computing count table of different JEL codes for HB, RP, GS
tab = data.frame()
for (i in Reduce(union,list(names(rp),names(hb),names(gs))))
{
tmp.hb=grep(pattern = i,x = names(hb))
tab["hb_count",i]=ifelse(test = length(tmp.hb)>0,yes = hb[tmp.hb],no=0)
tmp.rp=grep(pattern = i,x = names(rp))
tab["rp_count",i]=ifelse(test = length(tmp.rp)>0,yes = rp[tmp.rp],no=0)
tmp.gs=grep(pattern = i,x = names(gs))
tab["gs_count",i]=ifelse(test = length(tmp.gs)>0,yes = gs[tmp.gs],no=0)
}
tab[,"Total"]   = apply(X = tab,MARGIN = 1,FUN = sum)
tab_count       = tab
# tab["hb_proc",] = round(tab["hb_count",]/tab["hb_count","Total"]*100,4)
# tab["rp_proc",] = round(tab["rp_count",]/tab["rp_count","Total"]*100,4)
# tab["gs_proc",] = round(tab["gs_count",]/tab["gs_count","Total"]*100,4)
# tab             = as.data.frame(tab[c(1,4,2,5,3,6),])
# tab_proc        = tab[grep(pattern = "_proc",x = rownames(tab)),]
#
# options(xtable.floating=F)
# format_decpla   = function(num,digits){(format(round(num,digits),nsmall=digits))}
# tab_latex=tab
# for (i in 1:dim(tab)[1])
# {
#   count=grepl(pattern = "count",x = rownames(tab[i,]))
#   tab_latex[i,]=as.list(format_decpla(num=as.double(tab[i,]),digits=ifelse(test = count,yes = 0,no = 2)))
# }
# rownames(tab_latex)=c("HB","\\%","RP","\\% ","GS","\\%  ")
#
#
# rownames(tab_count) = toupper(gsub(pattern = "_count",replacement = "",x = rownames(tab_count)))
# print(xtable(tab_count,align="c|rrrrrrrrrrrrrrrrrrr|r",digits = 0),sanitize.text.function=function(x){x})
#
# rownames(tab_proc)=toupper(gsub(pattern = "_proc",replacement = "",x = rownames(tab_proc)))
# print(xtable(tab_proc[,1:10],align=c("c|",rep(x = ">{\\raggedleft\\arraybackslash}p{1cm}",times=10)),digits = 2,),sanitize.text.function=function(x){x})
# print(xtable(tab_proc[,11:20],align=c("c|",rep(x = ">{\\raggedleft\\arraybackslash}p{1cm}",times=9),"|>{\\raggedleft\\arraybackslash}p{1cm}"),digits = 2,),sanitize.text.function=function(x){x})
# ############################################################################
# #######Mosaic plot
# ############################################################################
# preparing data for Plot
tab2              = tab_count #tab[grepl(pattern = "count",x =rownames(tab)),]
tab2              = as.data.frame(t(tab2))
tab4              = tab2[-dim(tab2)[1],]
tab2[,"JELcodes"] = rownames(tab2)
for (i in 1:3)
{
name=substr(x = colnames(tab2)[i],start=1,stop=2)
tmp=cbind(tab2[,c(i,4)],Ranking=toupper(name))
colnames(tmp)[1]="Freq"
assign(tolower(paste0(name,"2")),value = tmp)
}
tab3=rbind(gs2,hb2,rp2)
# creating mosaic plot
png(file="ARRmossub.png",width=plotsize[1], height=plotsize[2],units="in",res=res,family = font)
mosaic(~JELcodes+Ranking, data=tab3[!grepl(pattern = "Total",x = tab3$JELcodes),],
gp                = gpar(fill =matrix(rep(fill_color,times =dim(tab2)[1]),ncol=3,byrow = T)), # coloring so that all HB, GS and RP are colored the same
shade             = TRUE,                                                                  # coloring according to gp
direction         = c("v", "h"),                                                           # setting the axis
spacing           = spacing_highlighting(start = unit(1, "lines")),                        # spacing between age groups
labeling_args     = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1,fontfamily = font),
gp_varnames = gpar(fontsize =fontsize_big, fontface = 1,fontfamily=font)),      # settings for the axis labels (font, fontsize)
keep_aspect_ratio = FALSE,                                                                 # allowing different length and width of plot, here fitted to pdf size
margins           = unit(8, "lines")                                                      # spacing from margins
)
dev.off()
# creating histogram for each ranking (HB, RP, GS)
png(file="ARRhissub.png",width=plotsize[1], height=plotsize[2],units="in",res=res,family = font)
par(mfrow=c(3,1),las=1,mar=c(3.1,5.5,1,1))
tab4=tab4[,order(colnames(tab4))]
for (i in 1:3)
{
name=substr(x = colnames(tab4)[i],start = 1,stop = 2)
barplot(height = tab4[,i],
names.arg = rownames(tab4),
ylab = toupper(name),
col = fill_color[i],
# cex.axis=cex.axis,
cex.names=cex.lab,
cex.lab=cex.main,
space=0.05,
axes=F
)
ax=c(0:4)*20
axis(2,at=ax,labels=ax,cex.axis=cex.axis)
box()
}
dev.off()
# clear cache and close windows
rm(list=ls(all=TRUE))
graphics.off()
# librariers
libraries = c("vcd","xtable")
lapply(libraries,function(x)if(!(x %in% installed.packages())){install.packages(x)})
lapply(libraries,library,quietly=TRUE,character.only=TRUE)
# color settings
max      = 180
az_red   = rgb(138, 15, 20,alpha=0.6 *max,maxColorValue = max)
az_green = rgb(  0, 87, 44,alpha=0.65*max,maxColorValue = max)
az_blue  = rgb(  0, 55,108,alpha=0.8 *max,maxColorValue = max)
# setting
font           = "serif" # font Times
fill_color     = c(az_red,az_green,az_blue)
cex.lab        = 2.5
cex.axis       = 2
cex.main       = 3.25
fontsize_big   = 36
fontsize_small = 22
plotsize       = c(16,8)
res            = 300
# data input and selection
data = read.csv2("ARRdata.csv",sep=";",dec=",",header = T,stringsAsFactors = FALSE)
hb   = na.exclude(data[,grep(pattern = "hb_commonscore|subject_fields|age_combined",x = colnames(data))])
rp   = na.exclude(data[,grep(pattern = "rp_rank|subject_fields|age_combined",x = colnames(data))])
gs   = na.exclude(data[,grep(pattern = "gs_total_cites|subject_fields|age_combined",x = colnames(data))])
gs   = gs[order(gs$gs_total_cites,decreasing = T),]
m    = 448
len  = min(dim(hb)[1],dim(rp)[1],dim(gs)[1])
if (m<len)len = m
hb   = table(hb[order(hb$hb_commonscore,decreasing = T),][1:len,]$subject_fields)
rp   = table(rp[1:len,]$subject_fields)
gs   = table(gs[1:len,]$subject_fields)
# computing count table of different JEL codes for HB, RP, GS
tab = data.frame()
for (i in Reduce(union,list(names(rp),names(hb),names(gs))))
{
tmp.hb=grep(pattern = i,x = names(hb))
tab["hb_count",i]=ifelse(test = length(tmp.hb)>0,yes = hb[tmp.hb],no=0)
tmp.rp=grep(pattern = i,x = names(rp))
tab["rp_count",i]=ifelse(test = length(tmp.rp)>0,yes = rp[tmp.rp],no=0)
tmp.gs=grep(pattern = i,x = names(gs))
tab["gs_count",i]=ifelse(test = length(tmp.gs)>0,yes = gs[tmp.gs],no=0)
}
tab[,"Total"]   = apply(X = tab,MARGIN = 1,FUN = sum)
# preparing data for Plot
tab2              = tab #tab[grepl(pattern = "count",x =rownames(tab)),]
tab2              = as.data.frame(t(tab2))
tab4              = tab2[-dim(tab2)[1],]
tab2[,"JELcodes"] = rownames(tab2)
for (i in 1:3)
{
name=substr(x = colnames(tab2)[i],start=1,stop=2)
tmp=cbind(tab2[,c(i,4)],Ranking=toupper(name))
colnames(tmp)[1]="Freq"
assign(tolower(paste0(name,"2")),value = tmp)
}
tab3=rbind(gs2,hb2,rp2)
# creating mosaic plot
png(file="ARRmossub.png",width=plotsize[1], height=plotsize[2],units="in",res=res,family = font)
mosaic(~JELcodes+Ranking, data=tab3[!grepl(pattern = "Total",x = tab3$JELcodes),],
gp                = gpar(fill =matrix(rep(fill_color,times =dim(tab2)[1]),ncol=3,byrow = T)), # coloring so that all HB, GS and RP are colored the same
shade             = TRUE,                                                                  # coloring according to gp
direction         = c("v", "h"),                                                           # setting the axis
spacing           = spacing_highlighting(start = unit(1, "lines")),                        # spacing between age groups
labeling_args     = list(gp_labels = gpar(fontsize = fontsize_small, fontface = 1,fontfamily = font),
gp_varnames = gpar(fontsize =fontsize_big, fontface = 1,fontfamily=font)),      # settings for the axis labels (font, fontsize)
keep_aspect_ratio = FALSE,                                                                 # allowing different length and width of plot, here fitted to pdf size
margins           = unit(8, "lines")                                                      # spacing from margins
)
dev.off()
# creating histogram for each ranking (HB, RP, GS)
png(file="ARRhissub.png",width=plotsize[1], height=plotsize[2],units="in",res=res,family = font)
par(mfrow=c(3,1),las=1,mar=c(3.1,5.5,1,1))
tab4=tab4[,order(colnames(tab4))]
for (i in 1:3)
{
name=substr(x = colnames(tab4)[i],start = 1,stop = 2)
barplot(height = tab4[,i],
names.arg = rownames(tab4),
ylab = toupper(name),
col = fill_color[i],
# cex.axis=cex.axis,
cex.names=cex.lab,
cex.lab=cex.main,
space=0.05,
axes=F
)
ax=c(0:4)*20
axis(2,at=ax,labels=ax,cex.axis=cex.axis)
box()
}
dev.off()
